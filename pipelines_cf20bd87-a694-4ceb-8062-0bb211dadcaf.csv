2023-08-22 16:42:08,"
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression

pipe = Pipeline([
    ('imputer', SimpleImputer()), 
    ('scaler', StandardScaler()), 
    ('classifier', LogisticRegression(C=20.0, dual=False, penalty='l2', solver='lbfgs'))
])

pipe.fit(X_train, y_train)
",0.5497005988023952
2023-08-22 16:42:13,"
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.kernel_approximation import RBFSampler

pipe = Pipeline([
    ('imputer', SimpleImputer()), 
    ('sampler', RBFSampler(gamma=0.4)), 
    ('classifier', ExtraTreesClassifier(bootstrap=False, criterion='entropy', max_features=0.6, min_samples_leaf=4, min_samples_split=20, n_estimators=150))
])

pipe.fit(X_train, y_train)",0.5580838323353293
2023-08-22 16:42:15,"
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.kernel_approximation import RBFSampler

pipe = Pipeline([
    ('imputer', SimpleImputer()), 
    ('sampler', RBFSampler(gamma=0.5)), 
    ('classifier', GaussianNB())
])

pipe.fit(X_train, y_train)",0.42634730538922155
2023-08-22 16:42:20,"
from sklearn.ensemble import VotingClassifier
from mlxtend.classifier import EnsembleVoteClassifier

# Create a list to store the stacker models
stackers = []

# Loop through each pipeline in the list_pipelines
for pipeline in list_pipelines:
    # Append the pipeline to the stackers list
    stackers.append(pipeline)

# Create the Multi-Layer Stack Ensembling model using EnsembleVoteClassifier
model = EnsembleVoteClassifier(clfs=stackers)

# Fit the model with X_train and y_train
model.fit(X_train, y_train)
",0.5748502994011976
