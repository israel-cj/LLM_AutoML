2023-08-22 16:58:54,"
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression

# Pipeline: LogisticRegression(StandardScaler(data), LogisticRegression.C=20.0, LogisticRegression.dual=False, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs')
pipe = Pipeline([
    ('imputer', SimpleImputer()),
    ('scaler', StandardScaler()),
    ('classifier', LogisticRegression(C=20.0, dual=False, penalty='l2', solver='lbfgs'))
])
pipe.fit(X_train, y_train)
",0.5497005988023952
2023-08-22 16:59:00,"from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier

# Pipeline: RandomForestClassifier(Nystroem(data, Nystroem.gamma=0.65, Nystroem.kernel='sigmoid', Nystroem.n_components=8), RandomForestClassifier.bootstrap=False, RandomForestClassifier.criterion='gini', RandomForestClassifier.max_features=0.15000000000000002, RandomForestClassifier.min_samples_leaf=3, RandomForestClassifier.min_samples_split=2, RandomForestClassifier.n_estimators=100)
pipe = Pipeline([
    ('imputer', SimpleImputer()),
    ('scaler', StandardScaler()),
    ('classifier', RandomForestClassifier(bootstrap=False, criterion='gini', max_features=0.15, min_samples_leaf=3, min_samples_split=2, n_estimators=100))
])
pipe.fit(X_train, y_train)",0.562874251497006
2023-08-22 16:59:07,"from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.ensemble import GradientBoostingClassifier

# Pipeline: GradientBoostingClassifier(data, GradientBoostingClassifier.learning_rate=1.0, GradientBoostingClassifier.max_depth=4, GradientBoostingClassifier.max_features=0.15000000000000002, GradientBoostingClassifier.min_samples_leaf=17, GradientBoostingClassifier.min_samples_split=7, GradientBoostingClassifier.n_estimators=100, GradientBoostingClassifier.subsample=0.7500000000000001)
pipe = Pipeline([
    ('imputer', SimpleImputer()),
    ('scaler', StandardScaler()),
    ('classifier', GradientBoostingClassifier(learning_rate=1.0, max_depth=4, max_features=0.15, min_samples_leaf=17, min_samples_split=7, n_estimators=100, subsample=0.75))
])
pipe.fit(X_train, y_train)",0.02035928143712575
2023-08-22 16:59:12,"
from mlxtend.classifier import EnsembleVoteClassifier

model = EnsembleVoteClassifier(clfs=list_pipelines, voting='soft', use_clones=False)
model.fit(X_train, y_train)
",0.38802395209580837
